generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password auth
  username      String?   @unique
  credits       Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  socialAccounts Json?     // Store social platform connections

  accounts      Account[]
  sessions      Session[]
  products      Product[]
  promotions    Promotion[] @relation("PromoterPromotions")
  notifications Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Product {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String   @db.Text
  websiteUrl  String
  logoUrl     String?
  category    ProductCategory @default(OTHER)
  status      ProductStatus   @default(DRAFT)
  trackType   TrackType       @default(RECIPROCAL)
  paidAmount  Decimal?        @db.Decimal(10, 2)
  createdAt   DateTime        @default(now())
  expiresAt   DateTime?

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  productSubmission ProductSubmission?
  promotions        Promotion[]

  @@index([status])
  @@index([userId])
}

model ProductSubmission {
  id                   String              @id @default(cuid())
  productId            String              @unique
  requiredPromotions   Int                 @default(2)
  completedPromotions  Int                 @default(0)
  status               SubmissionStatus    @default(PENDING)
  submittedAt          DateTime            @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Promotion {
  id              String          @id @default(cuid())
  promoterId      String
  productId       String
  content         String          @db.Text
  platform        Platform
  platformPostUrl String?
  status          PromotionStatus @default(PENDING)
  createdAt       DateTime        @default(now())
  verifiedAt      DateTime?
  creditsEarned   Int             @default(0)

  promoter      User           @relation("PromoterPromotions", fields: [promoterId], references: [id], onDelete: Cascade)
  product       Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  trackingLink  TrackingLink?

  @@index([promoterId])
  @@index([productId])
  @@index([status])
}

model TrackingLink {
  id           String   @id @default(cuid())
  promotionId  String   @unique
  trackingCode String   @unique
  originalUrl  String
  trackedUrl   String
  createdAt    DateTime @default(now())

  promotion       Promotion        @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  promotionClicks PromotionClick[]

  @@index([trackingCode])
}

model PromotionClick {
  id              String   @id @default(cuid())
  trackingLinkId  String
  ipAddress       String
  userAgent       String   @db.Text
  referrer        String?  @db.Text
  clickedAt       DateTime @default(now())

  trackingLink TrackingLink @relation(fields: [trackingLinkId], references: [id], onDelete: Cascade)

  @@index([clickedAt])
  @@index([trackingLinkId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  content   String           @db.Text
  type      NotificationType
  data      Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
}

enum ProductCategory {
  SAAS
  NEWSLETTER
  TOOL
  OTHER
}

enum ProductStatus {
  DRAFT
  ACTIVE
  EXPIRED
}

enum TrackType {
  RECIPROCAL
  PAID
}

enum SubmissionStatus {
  PENDING
  ACTIVE
  COMPLETED
}

enum Platform {
  X
  REDDIT
  LINKEDIN
  PRODUCTHUNT
}

enum PromotionStatus {
  PENDING
  VERIFIED
  COMPLETED
}

enum NotificationType {
  NEW_PRODUCT
  PROMOTION_VERIFIED
  CREDITS_EARNED
}